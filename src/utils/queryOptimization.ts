
/**
 * Utilitaires pour l'optimisation des requÃªtes React Query
 */

// Configuration des temps de cache par type de donnÃ©e
export const CACHE_TIMES = {
  // DonnÃ©es statiques (peu de changements)
  STATIC: {
    staleTime: 1000 * 60 * 60 * 24, // 24 heures
    gcTime: 1000 * 60 * 60 * 24 * 7, // 7 jours
  },
  
  // DonnÃ©es de rÃ©fÃ©rence utilisateur (changements occasionnels)
  REFERENCE: {
    staleTime: 1000 * 60 * 30, // 30 minutes
    gcTime: 1000 * 60 * 60 * 2, // 2 heures
  },
  
  // DonnÃ©es du dashboard (changements frÃ©quents)
  DASHBOARD: {
    staleTime: 1000 * 60 * 2, // 2 minutes
    gcTime: 1000 * 60 * 10, // 10 minutes
  },
  
  // DonnÃ©es temps rÃ©el (changements trÃ¨s frÃ©quents)
  REALTIME: {
    staleTime: 1000 * 30, // 30 secondes
    gcTime: 1000 * 60 * 5, // 5 minutes
  },

  // DonnÃ©es de liste paginÃ©es
  PAGINATED: {
    staleTime: 1000 * 60, // 1 minute
    gcTime: 1000 * 60 * 15, // 15 minutes
  }
};

// Options par dÃ©faut pour diffÃ©rents types de requÃªtes
export const getQueryOptions = (type: keyof typeof CACHE_TIMES) => ({
  ...CACHE_TIMES[type],
  refetchOnWindowFocus: false,
  refetchOnMount: false,
  retry: 2
});

// Fonction pour prÃ©charger les donnÃ©es critiques
export const prefetchCriticalData = async (queryClient: any, userId: string) => {
  console.log("ğŸš€ PrÃ©chargement des donnÃ©es critiques");
  
  // PrÃ©charger les donnÃ©es du dashboard en arriÃ¨re-plan
  queryClient.prefetchQuery({
    queryKey: ["optimized-dashboard", userId],
    staleTime: CACHE_TIMES.DASHBOARD.staleTime
  });
  
  // PrÃ©charger les donnÃ©es statiques
  queryClient.prefetchQuery({
    queryKey: ["static-vehicle-expense-types"],
    staleTime: CACHE_TIMES.STATIC.staleTime
  });
};

// Fonction pour nettoyer le cache pÃ©riodiquement
export const cleanupCache = (queryClient: any) => {
  console.log("ğŸ§¹ Nettoyage du cache");
  
  // Supprimer les requÃªtes inactives depuis plus de 30 minutes
  queryClient.getQueryCache().clear();
};
