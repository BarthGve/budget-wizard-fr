
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useCurrentUser } from "./useCurrentUser";
import { useCallback, useEffect, useRef } from "react";
import { toast } from "sonner";

/**
 * Hook optimis√© pour le dashboard avec requ√™tes parall√®les et mise en cache intelligente
 */
export const useOptimizedDashboard = () => {
  const { currentUser } = useCurrentUser();
  const queryClient = useQueryClient();
  const realtimeChannelRef = useRef<any>(null);

  // Requ√™te unique optimis√©e avec Promise.all pour charger toutes les donn√©es en parall√®le
  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ["optimized-dashboard", currentUser?.id],
    queryFn: async () => {
      if (!currentUser?.id) throw new Error("Utilisateur non authentifi√©");

      console.log("üöÄ Chargement optimis√© du dashboard");
      
      // Requ√™tes parall√®les avec jointures optimis√©es
      const [
        contributorsResult,
        recurringExpensesResult,
        monthlySavingsResult,
        creditsResult,
        vehiclesResult,
        savingsProjectsResult
      ] = await Promise.all([
        // Contributors avec optimisation
        supabase
          .from("contributors")
          .select("*")
          .eq("profile_id", currentUser.id)
          .order("total_contribution", { ascending: false }),
        
        // Recurring expenses avec limitation
        supabase
          .from("recurring_expenses")
          .select("*")
          .eq("profile_id", currentUser.id)
          .order("amount", { ascending: false })
          .limit(50),
        
        // Monthly savings
        supabase
          .from("monthly_savings")
          .select("*")
          .eq("profile_id", currentUser.id)
          .order("amount", { ascending: false }),
        
        // Credits actifs seulement
        supabase
          .from("credits")
          .select("*")
          .eq("profile_id", currentUser.id)
          .eq("statut", "actif")
          .order("date_derniere_mensualite", { ascending: true }),
        
        // V√©hicules actifs
        supabase
          .from("vehicles")
          .select("*")
          .eq("profile_id", currentUser.id)
          .order("created_at", { ascending: false }),
        
        // Projets d'√©pargne actifs
        supabase
          .from("projets_epargne")
          .select("*")
          .eq("profile_id", currentUser.id)
          .neq("statut", "d√©pass√©")
          .order("created_at", { ascending: false })
      ]);

      // V√©rifier les erreurs
      const errors = [
        contributorsResult.error,
        recurringExpensesResult.error,
        monthlySavingsResult.error,
        creditsResult.error,
        vehiclesResult.error,
        savingsProjectsResult.error
      ].filter(Boolean);

      if (errors.length > 0) {
        console.error("Erreurs lors du chargement:", errors);
        throw new Error("Erreur lors du chargement des donn√©es");
      }

      console.log("‚úÖ Dashboard optimis√© charg√© avec succ√®s");

      return {
        contributors: contributorsResult.data || [],
        recurringExpenses: recurringExpensesResult.data || [],
        monthlySavings: monthlySavingsResult.data || [],
        credits: creditsResult.data || [],
        vehicles: vehiclesResult.data || [],
        savingsProjects: savingsProjectsResult.data || []
      };
    },
    enabled: !!currentUser?.id,
    staleTime: 1000 * 60 * 2, // 2 minutes de cache
    gcTime: 1000 * 60 * 10, // 10 minutes en m√©moire
    refetchOnWindowFocus: false, // √âviter les refetch inutiles
    refetchOnMount: false,
    retry: 2
  });

  // Canal temps r√©el unique et optimis√©
  useEffect(() => {
    if (!currentUser?.id) return;

    // Nettoyer le canal existant
    if (realtimeChannelRef.current) {
      supabase.removeChannel(realtimeChannelRef.current);
    }

    // Canal unique pour toutes les tables du dashboard
    const channel = supabase
      .channel(`dashboard-${currentUser.id}`)
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'contributors', filter: `profile_id=eq.${currentUser.id}` },
        () => {
          console.log("üìä Contributeur modifi√© - invalidation cache");
          queryClient.invalidateQueries({ queryKey: ["optimized-dashboard"] });
        }
      )
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'recurring_expenses', filter: `profile_id=eq.${currentUser.id}` },
        () => {
          console.log("üí≥ Charge r√©currente modifi√©e - invalidation cache");
          queryClient.invalidateQueries({ queryKey: ["optimized-dashboard"] });
        }
      )
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'monthly_savings', filter: `profile_id=eq.${currentUser.id}` },
        () => {
          console.log("üí∞ √âpargne modifi√©e - invalidation cache");
          queryClient.invalidateQueries({ queryKey: ["optimized-dashboard"] });
        }
      )
      .on(
        'postgres_changes',
        { event: '*', schema: 'public', table: 'credits', filter: `profile_id=eq.${currentUser.id}` },
        () => {
          console.log("üè¶ Cr√©dit modifi√© - invalidation cache");
          queryClient.invalidateQueries({ queryKey: ["optimized-dashboard"] });
        }
      )
      .subscribe();

    realtimeChannelRef.current = channel;

    return () => {
      if (realtimeChannelRef.current) {
        supabase.removeChannel(realtimeChannelRef.current);
      }
    };
  }, [currentUser?.id, queryClient]);

  // Fonction de rafra√Æchissement optimis√©e
  const refreshDashboard = useCallback(async () => {
    console.log("üîÑ Rafra√Æchissement manuel du dashboard");
    try {
      await refetch();
      toast.success("Donn√©es actualis√©es");
    } catch (error) {
      console.error("Erreur lors du rafra√Æchissement:", error);
      toast.error("Erreur lors de l'actualisation");
    }
  }, [refetch]);

  return {
    dashboardData: data,
    isLoading,
    error,
    refreshDashboard,
    // Propri√©t√©s individuelles pour compatibilit√©
    contributors: data?.contributors || [],
    recurringExpenses: data?.recurringExpenses || [],
    monthlySavings: data?.monthlySavings || [],
    credits: data?.credits || [],
    vehicles: data?.vehicles || [],
    savingsProjects: data?.savingsProjects || []
  };
};
