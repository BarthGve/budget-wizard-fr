
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.48.1";
import { corsHeaders } from "../utils/cors.ts";
import { ChangelogEntry } from "../types.ts";

/**
 * R√©cup√®re les d√©tails de l'entr√©e changelog depuis Supabase
 */
export async function fetchChangelogDetails(supabase: any, id: string) {
  console.log(`üìù R√©cup√©ration des d√©tails pour l'entr√©e changelog ${id}`);
  const { data, error } = await supabase
    .from("changelog_entries")
    .select("*")
    .eq("id", id)
    .single();
  
  if (error || !data) {
    console.error("‚ùå Erreur r√©cup√©ration changelog:", error);
    return {
      success: false,
      error,
      response: new Response(
        JSON.stringify({ 
          error: "Erreur lors de la r√©cup√©ration de l'entr√©e changelog",
          details: error 
        }),
        { 
          status: 404, 
          headers: { "Content-Type": "application/json", ...corsHeaders } 
        }
      )
    };
  }
  
  console.log("üìù Entr√©e changelog trouv√©e:", JSON.stringify(data));
  return { success: true, data: data as ChangelogEntry };
}

/**
 * √âcoute des notifications de changelog PostgreSQL
 * Cette fonction est uniquement pr√©paratoire pour une future impl√©mentation
 */
export async function setupChangelogNotificationListener() {
  try {
    console.log("üìù Configuration de l'√©couteur de notifications changelog");
    
    // Cr√©er une connexion de base de donn√©es d√©di√©e pour les notifications
    const dbUrl = Deno.env.get("SUPABASE_DB_URL");
    if (!dbUrl) {
      console.error("‚ùå URL de base de donn√©es manquante");
      return;
    }
    
    // Cette fonction simule l'√©coute des notifications PostgreSQL
    // Comme nous ne pouvons pas directement √©couter les notifications PG dans Edge Functions,
    // nous utiliserons plut√¥t l'API de Supabase Realtime dans une future version
    
    console.log("‚úÖ √âcouteur de notifications changelog configur√©");
  } catch (error) {
    console.error("‚ùå Erreur lors de la configuration de l'√©couteur:", error);
  }
}
